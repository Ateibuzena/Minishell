NAME = minishell

CC = gcc

CFLAGS = -Wall -Wextra -Werror -I. -I../parser -I../pipex -I../tokens -I../prompt -I../builtins -I../enviroment -I../history -I../signals -I../libft

RM = rm -f

# üìÇ Librer√≠as externas
LIBFT_DIR = ../libft
LIBFT_LIB = $(LIBFT_DIR)/libft.a

SIGNALS_DIR = ../signals
SIGNALS_LIB = $(SIGNALS_DIR)/signals.a

HISTORY_DIR = ../history
HISTORY_LIB = $(HISTORY_DIR)/history.a

ENVIROMENT_DIR = ../enviroment
ENVIROMENT_LIB = $(ENVIROMENT_DIR)/enviroment.a

BUILTINS_DIR = ../builtins
BUILTINS_LIB = $(BUILTINS_DIR)/builtins.a

PROMPT_DIR = ../prompt
PROMPT_LIB = $(PROMPT_DIR)/prompt.a

TOKENS_DIR = ../tokens
TOKENS_LIB = $(TOKENS_DIR)/tokens.a

PIPEX_DIR = ../pipex
PIPEX_LIB = $(PIPEX_DIR)/pipex.a

PARSER_DIR = ../parser
PARSER_LIB = $(PARSER_DIR)/parser.a

# üìÇ Directorios de c√≥digo y objetos
SRCDIR = src
OBJDIR = obj

# üîç Buscar archivos fuente en subdirectorios
SRCS := $(shell find $(SRCDIR) -type f -name "*.c")
OBJS := $(SRCS:$(SRCDIR)/%.c=$(OBJDIR)/%.o)

# üé® Colores
RED      = \033[0;31m
GREEN    = \033[0;32m
YELLOW   = \033[0;33m
MAGENTA  = \033[0;35m
CYAN     = \033[0;36m
WHITE    = \033[0;37m
RESET    = \033[0m

# üöÄ Compilaci√≥n principal
all: libs $(NAME)

# üîó Compilar librer√≠as en orden correcto
libs:
	@echo "$(CYAN)üì¶ Compilando librer√≠as...$(RESET)"
	@make --no-print-directory -C $(LIBFT_DIR)
	@echo "$(CYAN)------------------------------------------------------------$(RESET)"
	@make --no-print-directory -C $(SIGNALS_DIR)
	@echo "$(CYAN)------------------------------------------------------------$(RESET)"
	@make --no-print-directory -C $(HISTORY_DIR)
	@echo "$(CYAN)------------------------------------------------------------$(RESET)"
	@make --no-print-directory -C $(ENVIROMENT_DIR)
	@echo "$(CYAN)------------------------------------------------------------$(RESET)"
	@make --no-print-directory -C $(BUILTINS_DIR)
	@echo "$(CYAN)------------------------------------------------------------$(RESET)"
	@make --no-print-directory -C $(PROMPT_DIR)
	@echo "$(CYAN)------------------------------------------------------------$(RESET)"
	@make --no-print-directory -C $(TOKENS_DIR)
	@echo "$(CYAN)------------------------------------------------------------$(RESET)"
	@make --no-print-directory -C $(PIPEX_DIR)
	@echo "$(CYAN)------------------------------------------------------------$(RESET)"
	@make --no-print-directory -C $(PARSER_DIR)
	@echo "$(CYAN)------------------------------------------------------------$(RESET)"
	@echo "$(GREEN)‚úÖ Librer√≠as compiladas.$(RESET)"

# üî® Compilar programa principal
$(NAME): $(OBJDIR) $(OBJS) $(LIBFT_LIB) $(SIGNALS_LIB) $(HISTORY_LIB) $(ENVIROMENT_LIB) $(BUILTINS_LIB) $(PROMPT_LIB) $(TOKENS_LIB) $(PIPEX_LIB) $(PARSER_LIB)
	@echo "$(CYAN)üîó Enlazando $(NAME)...$(RESET)"
	@$(CC) $(CFLAGS) $(OBJS) -lreadline -lhistory $(PARSER_LIB) $(PIPEX_LIB) $(TOKENS_LIB) $(PROMPT_LIB) $(BUILTINS_LIB) $(ENVIROMENT_LIB) $(HISTORY_LIB) $(SIGNALS_LIB) $(LIBFT_LIB) -o $(NAME)
	@echo "$(GREEN)‚úÖ $(NAME) compilada con √©xito.$(RESET)"

# üìÇ Crear directorios de objetos
$(OBJDIR):
	@echo "$(GREEN)üìÇ Creando directorios de objetos...$(RESET)"
	@mkdir -p $(OBJDIR)
	@find $(SRCDIR) -type d | sed 's|$(SRCDIR)|$(OBJDIR)|' | xargs -I {} mkdir -p {}
	@echo "$(GREEN)‚úÖ Directorios de objetos creados.$(RESET)"

# üèó Compilar archivos `.c` en `.o`, respetando subdirectorios
$(OBJDIR)/%.o: $(SRCDIR)/%.c | $(OBJDIR)
	@mkdir -p $(dir $@)
	@echo "$(YELLOW)üîπ Compilando $< -> $@$(RESET)"
	@$(CC) $(CFLAGS) -c $< -o $@
	@echo "$(GREEN)‚úÖ Compilado: $@$(RESET)"

# üßπ Limpieza
clean:
	@echo "$(RED)üóëÔ∏è  Eliminando archivos objeto...$(RESET)"
	@$(RM) $(OBJS)
	@echo "$(MAGENTA)‚úÖ Limpieza de objetos completada.$(RESET)"
	@if [ -d "$(OBJDIR)" ]; then \
		echo "$(RED)üöÆ Eliminando directorio de objetos...$(RESET)"; \
		$(RM) -rf $(OBJDIR); \
		echo "$(MAGENTA)‚úÖ Directorio obj eliminado.$(RESET)"; \
	fi

# üßπ Limpieza total (elimina objetos y archivo .a)
fclean: clean
	@if [ -f "$(NAME)" ]; then \
		echo "$(RED)üöÆ Eliminando archivo $(NAME)...$(RESET)"; \
		$(RM) $(NAME); \
		echo "$(MAGENTA)‚úÖ $(NAME) eliminado.$(RESET)"; \
	fi
	@if [ -f "$(PARSER_LIB)" ]; then \
		echo "$(RED)üöÆ Eliminando librer√≠a externa $(PARSER_LIB)...$(RESET)"; \
		make -C $(PARSER_DIR) fclean; \
		echo "$(MAGENTA)‚úÖ Librer√≠a $(PARSER_LIB) eliminada.$(RESET)"; \
	fi
	@if [ -f "$(PIPEX_LIB)" ]; then \
		echo "$(RED)üöÆ Eliminando librer√≠a externa $(PIPEX_LIB)...$(RESET)"; \
		make -C $(PIPEX_DIR) fclean; \
		echo "$(MAGENTA)‚úÖ Librer√≠a $(PIPEX_LIB) eliminada.$(RESET)"; \
	fi
	@if [ -f "$(TOKENS_LIB)" ]; then \
		echo "$(RED)üöÆ Eliminando librer√≠a externa $(TOKENS_LIB)...$(RESET)"; \
		make -C $(TOKENS_DIR) fclean; \
		echo "$(MAGENTA)‚úÖ Librer√≠a $(TOKENS_LIB) eliminada.$(RESET)"; \
	fi
	@if [ -f "$(PROMPT_LIB)" ]; then \
		echo "$(RED)üöÆ Eliminando librer√≠a externa $(PROMPT_LIB)...$(RESET)"; \
		make -C $(PROMPT_DIR) fclean; \
		echo "$(MAGENTA)‚úÖ Librer√≠a $(PROMPT_LIB) eliminada.$(RESET)"; \
	fi
	@if [ -f "$(BUILTINS_LIB)" ]; then \
		echo "$(RED)üöÆ Eliminando librer√≠a externa $(BUILTINS_LIB)...$(RESET)"; \
		make -C $(BUILTINS_DIR) fclean; \
		echo "$(MAGENTA)‚úÖ Librer√≠a $(BUILTINS_LIB) eliminada.$(RESET)"; \
	fi
	@if [ -f "$(ENVIROMENT_LIB)" ]; then \
		echo "$(RED)üöÆ Eliminando librer√≠a externa $(ENVIROMENT_LIB)...$(RESET)"; \
		make -C $(ENVIROMENT_DIR) fclean; \
		echo "$(MAGENTA)‚úÖ Librer√≠a $(ENVIROMENT_LIB) eliminada.$(RESET)"; \
	fi
	@if [ -f "$(HISTORY_LIB)" ]; then \
		echo "$(RED)üöÆ Eliminando librer√≠a externa $(HISTORY_LIB)...$(RESET)"; \
		make -C $(HISTORY_DIR) fclean; \
		echo "$(MAGENTA)‚úÖ Librer√≠a $(HISTORY_LIB) eliminada.$(RESET)"; \
	fi
	@if [ -f "$(SIGNALS_LIB)" ]; then \
		echo "$(RED)üöÆ Eliminando librer√≠a externa $(SIGNALS_LIB)...$(RESET)"; \
		make -C $(SIGNALS_DIR) fclean; \
		echo "$(MAGENTA)‚úÖ Librer√≠a $(SIGNALS_LIB) eliminada.$(RESET)"; \
	fi
	@if [ -f "$(LIBFT_LIB)" ]; then \
		echo "$(RED)üöÆ Eliminando librer√≠a externa $(LIBFT_LIB)...$(RESET)"; \
		make -C $(LIBFT_DIR) fclean; \
		echo "$(MAGENTA)‚úÖ Librer√≠a $(LIBFT_LIB) eliminada.$(RESET)"; \
	fi

# üîÑ Recompilaci√≥n completa
re: fclean all

.PHONY: all clean fclean re