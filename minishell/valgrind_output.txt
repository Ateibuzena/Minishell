==3277421== Memcheck, a memory error detector
==3277421== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3277421== Using Valgrind-3.18.1 and LibVEX; rerun with -h for copyright info
==3277421== Command: ./minishell
==3277421== Parent PID: 3256501
==3277421== 
==3277421== Invalid read of size 8
==3277421==    at 0x402958: ft_last_process (pipex_process.c:279)
==3277421==    by 0x401AF0: ft_pipex (pipex.c:47)
==3277421==    by 0x40149B: ft_pipes (executor.c:25)
==3277421==    by 0x40138A: main (main.c:33)
==3277421==  Address 0x4ba0150 is 0 bytes after a block of size 16 alloc'd
==3277421==    at 0x4848899: malloc (in /usr/libexec/valgrind/vgpreload_memcheck-amd64-linux.so)
==3277421==    by 0x402D56: ft_init (pipex_utils.c:126)
==3277421==    by 0x401AC0: ft_pipex (pipex.c:44)
==3277421==    by 0x40149B: ft_pipes (executor.c:25)
==3277421==    by 0x40138A: main (main.c:33)
==3277421== 
==3277421== Invalid read of size 4
==3277421==    at 0x40295C: ft_last_process (pipex_process.c:279)
==3277421==    by 0x401AF0: ft_pipex (pipex.c:47)
==3277421==    by 0x40149B: ft_pipes (executor.c:25)
==3277421==    by 0x40138A: main (main.c:33)
==3277421==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==3277421== 
==3277421== 
==3277421== Process terminating with default action of signal 11 (SIGSEGV)
==3277421==  Access not within mapped region at address 0x0
==3277421==    at 0x40295C: ft_last_process (pipex_process.c:279)
==3277421==    by 0x401AF0: ft_pipex (pipex.c:47)
==3277421==    by 0x40149B: ft_pipes (executor.c:25)
==3277421==    by 0x40138A: main (main.c:33)
==3277421==  If you believe this happened as a result of a stack
==3277421==  overflow in your program's main thread (unlikely but
==3277421==  possible), you can try to increase the size of the
==3277421==  main thread stack using the --main-stacksize= flag.
==3277421==  The main thread stack size used in this run was 8388608.
==3277421== 
==3277421== HEAP SUMMARY:
==3277421==     in use at exit: 227,608 bytes in 610 blocks
==3277421==   total heap usage: 1,042 allocs, 432 frees, 255,514 bytes allocated
==3277421== 
==3277421== LEAK SUMMARY:
==3277421==    definitely lost: 136 bytes in 10 blocks
==3277421==    indirectly lost: 0 bytes in 0 blocks
==3277421==      possibly lost: 0 bytes in 0 blocks
==3277421==    still reachable: 227,472 bytes in 600 blocks
==3277421==         suppressed: 0 bytes in 0 blocks
==3277421== Rerun with --leak-check=full to see details of leaked memory
==3277421== 
==3277421== For lists of detected and suppressed errors, rerun with: -s
==3277421== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)
